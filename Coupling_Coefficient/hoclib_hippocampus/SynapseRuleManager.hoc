/**
 * @file   SynapseRuleManager.hoc
 * @brief  Process Synapse connections Rules of a BlueConfig (if any) and then instantiate the synapses for a bluebrain sim
 *
 * @author King, Ranjan, Delalondre, Leite
 * @remark Copyright Â© BBP/EPFL 2005-2018; All rights reserved. Do not distribute without further notice.
 */

{load_file("ConfigParser.hoc")}
{load_file("TargetParser.hoc")}
{load_file("Connection.hoc")}
{load_file("timeit.hoc")}
{load_file("SynReaders.hoc")}
{load_file("fileUtils.hoc")}

/*!
 * The SynapseRuleManager is designed to encapsulate the creation of synapses for BlueBrain simulations, handling
 * the data coming from the nrn.h5 file.  If the BlueConfig file provides and Connection Rules, those override
 * which synapses are created.  Note that the Connection rules are processed with the assumption that they come in
 * the config file from more general to more specific.  e.g. A column->column connection should come before
 * layer 4 -> layer 2 which should come before L4PC -> L2PC.  Once all aynapses are preped with final wieghts, the
 * netcons can be created.
 */

begintemplate SynapseRuleManager

external timeit, prtime, timeit_init, timeit_setVerbose, timeit_register, timeit_start, timeit_add, fileExists, syntoolEnabled

//-----------------------------------------------------------------------------------------------
// Declare member variables
//-----------------------------------------------------------------------------------------------

objref synapseReader, idReader, maskReader, targetManager, connectionList, rngList, replayList, loadedMap, this
objref synOverride

//-----------------------------------------------------------------------------------------------
// Public members
//-----------------------------------------------------------------------------------------------

/// Indicate if BlueConfig connection blocks create new synapses/connections, or just override values of existing ones
public creationMode
public init, connectAll, groupConnect, finalizeSynapses, replay, applyDelayedConnection, toggleVerbose, restartModSources, openSynapseFile, getSynapseDataForGID
public synOverride, openIDFile, openMaskFile, nrnVersion

//-----------------------------------------------------------------------------------------------
// Member function implementations
//-----------------------------------------------------------------------------------------------

/*!
 * Constructor for SynapseRuleManager, checks that the nrn.h5 synapse file is available for reading
 *
 * @param $s1 Where the nrn.h5 file exists (note that 'nrn.h5' is not needed and is added by this function
 * @param $o2 Reference to TargetManager which this RuleManager will use to query targets and translate locations to points
 * @param $3  nSynapseFiles How many nrn.h5 files to expect (typically 1)
 * @param $s4 Synapse mode dictating modifiers to what synapses are placed based on synType (AmpaSyns vs DualSyns vs ???)
 */
proc init() { local synFileFound  localobj connectTemp, nilConfig, tmpFile
    strdef circuitPath, synapseFile
    circuitPath = $s1
    targetManager = $o2
    creationMode = 1
    verbose = (targetManager.cellDistributor.pnm.pc.id() == 0)
    synFileFound = 0

    // If syntool avail attempt finding circuit.syn2 since is the new default.
    // Syanpsetool warns if a directory is given for syn2
    if (syntoolEnabled) {
        sprint(synapseFile, "%s/%s", circuitPath, "circuit.syn2")
        synFileFound = fileExists(synapseFile)
        if (!synFileFound) {
            sprint(synapseFile, "%s/%s", circuitPath, "circuit.sonata")
            synFileFound = fileExists(synapseFile)
        }
    }

    if (!synFileFound) {
        sprint(synapseFile, "%s/%s", circuitPath, "nrn.h5")
        synFileFound = fileExists(synapseFile)
    }
    if (!synFileFound) {
        execerror("Could not find any compatible synapse file.")
    }

    openSynapseFile(synapseFile, $3)
    connectionList = new List()
    rngList = new List()

    //create a temporary Connection object to get the values for the synapse mode constants
    connectTemp= new Connection( 0, 0, nilConfig, "STDPoff", 0 )

    synapseMode = connectTemp.DUAL_SYNS
    if( numarg() == 4 ) {
        strdef sModeStr
        sModeStr = $s4
        if( 0 == strcmp( sModeStr, "AMPA_ONLY" ) || 0 == strcmp( sModeStr, "AmpaOnly" ) ) {
            synapseMode = connectTemp.AMPA_ONLY
        } else if ( 0 == strcmp( sModeStr, "DUAL_SYNS" ) || 0 == strcmp( sModeStr, "DualSyns" ) ) {
            synapseMode = connectTemp.DUAL_SYNS
        } else {
            print "Invalid synapse mode ", sModeStr, ". Terminating."
            execerror("Invalid synapse mode %s. Terminating.", sModeStr )
        }
    }

    // indicate that an id file is opened and available
    idFileLoaded = 0

    // indicate that a mask file is opened and available
    maskFileLoaded = 0
}

//-----------------------------------------------------------------------------------------------

/*!
 * We are in a transition phase to make synapse identities more robust across multiple circuit generation methods.
 * This means that synapse ids should be independent of the row number.
 * This is subject to change, but for now we take ids from a separate file
 *
 * @param $s1 Where the nrn_extra.h5 file exists (note that 'nrn_extra.h5' is not needed and is added by this function
 * @param $2  nSynapseFiles How many nrn.h5 files to expect (typically 1)
 */
proc openIDFile() {  localobj pc, fileName, fileTest, testResult, nrnPath
    nrnPath = new String($s1)
    pc = new ParallelContext()
    testResult = new Vector()
    fileName = new String()

    if( pc.id() == 0 ) {
        if( $2 == 1 ) {
            sprint( fileName.s, "%s/nrn_extra.h5", nrnPath.s )
        } else {
            sprint( fileName.s, "%s/nrn_extra.h5.0", nrnPath.s )
        }
        fileTest = new File( fileName.s )
        fileTest.ropen()
        if( fileTest.isopen() ) {
            print "Will load SynapseID file"
            fileTest.close()
            testResult.append( 1 )
        } else {
            print "Will use SynapseIndices as IDs"
            testResult.append( 0 )
        }
    }
    pc.broadcast( testResult, 0 )

    if( testResult.x[0] == 1 ) {
        sprint( fileName.s, "%s/%s", nrnPath.s, "nrn_extra.h5")
        idReader = new HDF5Reader( fileName.s, $2 )

        idFileLoaded = 1
    }
}


// ----------------------------------------------------------------------------------------------

/*!
 * For structural plasticity development, we introduce a mask file which will provide additional information
 * concerning which synapses are immediately functional, potentially functional, and never to be used.
 * In the future this should all be contained in a new single synapse file
 *
 * @param $o1 String with path to mask file
 */
proc openMaskFile() {  local ret  localobj pc, fileTest, testResult
    // verify file exists

    testResult = new Vector(1)
    pc = new ParallelContext()
    if( pc.id() == 0 ) {
        fileTest = new File( $o1.s )
        fileTest.ropen()
        if( fileTest.isopen() ) {
            print "Will use mask file ", $o1.s
            testResult.x[0] = 1
        } else {
            print "Failed to open mask file ", $o1.s
            testResult.x[0] = 0
        }
    }
    pc.broadcast( testResult, 0 )

    if( testResult.x[0] == 0 ) {
        quit()
    }

    maskReader = new HDF5Reader( $o1.s )

    // this should only be called if we are using the legacy h5 reader, but just to be sure we enclose in execute statement
    ret = execute1( "synapseReader.setMaskReader( maskReader )", this )
    if( ret == 0 ) {
        if( pc.id() == 0 ) {
            print "Could not set maskReader reference for synapseReader.  Only valid for legacy h5 reader"
        }
    } else {
        maskFileLoaded = 1
        if( pc.id() == 0 ) {
            print "Mask file ready"
        }
    }
}

//-----------------------------------------------------------------------------------------------

/*!
 * @param $s1 Root name of Synapse file(s) to open.
 * @param $2 nSynapseFiles - The number of synapse files (only for nrn)
 */
proc openSynapseFile()  { local nSynapseFiles
    strdef synapseFile, sModeStr

    sprint( synapseFile, "%s", $s1 )
    nSynapseFiles = 1
    if (numarg() == 2) nSynapseFiles = $2

    if(syntoolEnabled) {
        if (verbose) print "[SynRuleManager] Using new-gen SynapseReader for ", synapseFile
        synapseReader = new SynReaderSynTool(synapseFile, 0, verbose)
        // synapseReader.dbg = verbose   // enable debug info on rank 0
    } else {
        if (verbose) print "[SynRuleManager] Warning: Attempting legacy Hdf5 NRN reader for ", synapseFile
        synapseReader = new SynReaderHdf5(synapseFile, nSynapseFiles, targetManager)
    }


    // Don't support synapse ids or mask values for other projection files (yet)
    idFileLoaded = 0
    maskFileLoaded = 0

    // Initialize / Clear previous maps
    loadedMap = new Map()
}

//-----------------------------------------------------------------------------------------------

/*!
 * For every gid in on this node, access its synapse parameters and instantiate all synapses
 * which it receives from (note that the presynatic cells may be off node)
 *
 * @param $o1 Vector with all local gids
 * @param $2 scalar Optional argument to scale all synapse / neetcon weights by the given factor
 */
proc connectAll() { local weightScalar, cellIndex, sgid, tgid \
    localobj gidvec, synParamsList, activeParams, activeConnection, nilConfig

    gidvec = $o1
    weightScalar = 1
    if( numarg() > 1 ) {
        weightScalar = $2
    }

    for cellIndex=0, gidvec.size()-1 {
        tgid = gidvec.x[cellIndex]
        synParamsList = getSynapseParameters(tgid)

        for synIndex=0, synParamsList.count()-1 {
            activeParams = synParamsList.o(synIndex)
            sgid = activeParams.sgid

            //Note: The sgids in any given dataset from nrn.h5 will come in sorted order, low to high.
            // This code therefore doesn't search or sort on its own.  If the nrn.h5 file changes in the future,
            // we must update the code accordingly

            if( object_id(activeConnection) == 0 ) {
                activeConnection = new Connection( sgid, tgid, nilConfig, "STDPoff", 0, synapseMode )
                activeConnection.setWeightScalar( weightScalar )
                storeConnection( activeConnection )
            } else if( activeConnection.sgid != sgid ) {
                activeConnection = new Connection( sgid, tgid, nilConfig, "STDPoff", 0, synapseMode )
                activeConnection.setWeightScalar( weightScalar )
                storeConnection( activeConnection )
            }

            activeConnection.append( targetManager.locationToPoint( tgid, activeParams.isec, activeParams.ipt, activeParams.offset ), activeParams, activeParams.synapseID )
        }
    }
}

//-----------------------------------------------------------------------------------------------

/*!
 * Given some gidlists, connect those gids in the source list to those in the dest list (note
 * the cells in the source list are not limited by what is on this cpu, whereas the dest list requires
 * the cells be local)
 *
 * @param $s1 Name of Source Target
 * @param $s2 Name of Destination Target
 * @param $3  Scaling weight to apply to the synapses
 * @param $o4 SynapseConfiguration string, or nil
 * @param $o5 Vector of gids on the local cpu
 * @param $s6 Turn STDP on or off
 * @param $7 spontMiniRate For spontaneous minis trigger rate
 * @param $8 synapseTypeIDRestrict to further restrict when the weight is applied [optional]
 */
proc groupConnect() { local weight, cellIndex, gid, synIndex, oldsgid, sgid, tgid, spontMiniRate, synapseTypeIDRestrict, sfound \
    localobj sTarget, dTarget, gidvec, synParamsList, activeParams, pendConn, existingConn, configuration, nil

    //unlike connectAll, we must look through connectionList to see if sgid->tgid exists because it may be getting weights updated
    // Note that it is better to get the whole target over just the gid vector, since then we can use utility functions like 'contains'
    sTarget = targetManager.getTarget( $s1 )
    dTarget = targetManager.getTarget( $s2 )

    spontMiniRate = $7
    weight = $3
    configuration = $o4
    synapseTypeIDRestrict = -1
    if( numarg() == 8 ) {
        synapseTypeIDRestrict = $8
    }

    gidvec = $o5
    for cellIndex=0, gidvec.size()-1 {
        tgid = gidvec.x[cellIndex]
        if( !dTarget.contains( tgid ) ) {
            continue
        }

        //this cpu owns some or all of the destination gid
        synParamsList = getSynapseParameters( gidvec.x[cellIndex] )

        oldsgid = -1
        pendConn = nil
        for synIndex=0, synParamsList.count()-1 {
            // Are we restricting the synapse type ID?
            if( synapseTypeIDRestrict != -1 && synParamsList.o(synIndex).synType != synapseTypeIDRestrict ) {
                continue
            }

            sgid = synParamsList.o(synIndex).sgid
            if( sgid != oldsgid ) {
                sfound = sTarget.completeContains(sgid)
            }
            if( sfound == 0 ) {
                continue
            }

            //to reach here, 'source' target includes a cell that sends to the tgid (don't care about which cpu sgid exists on)
            // are we on a different sgid than the previous iteration?
            if( sgid != oldsgid ) {

                if( pendConn != nil ) { //if we were putting things in a pending object, we can store that away now
                    storeConnection( pendConn )
                }

                oldsgid = sgid

                //determine what we will do with the new sgid: update weights if seen before, or prep for pending connections
                existingConn = findConnection( sgid, tgid )
                if( object_id(existingConn, 1) != -1 ) {
                    // since we have seen this pathway/connection before, we just need to update the weights
                    if( weight != -1 ) {
                        existingConn.setWeightScalar( weight )
                    }
                    existingConn.appendSynapseConfiguration( configuration )

                    // If the connection exists already, check $s5 to see if STDP
                    //   should be added and set the existingConn.UseSTDP value based on $s5
                    //   Note that the DOUBLET_STDP, etc values are defined in Connection.init
                    if( strcmp( $s6, "Doublet" ) == 0 ) {
                        existingConn.UseSTDP = existingConn.DOUBLET_STDP
                    } else if( strcmp( $s6, "Triplet" ) == 0 ) {
                        existingConn.UseSTDP = existingConn.TRIPLET_STDP
                    }

                    if( object_id( synOverride, 1 ) != -1 ) {
                        existingConn.synOverride = synOverride
                    }

                    pendConn = nil

                } else {
                    if( creationMode == 1 ) {

                        // recently added the feature where weight is optional.  But what should happen if the initial group
                        // connect is given -1?  I would think is is an error.  For now, emit a warning
                        if( weight == -1 ) {
                            print "Warning: invalid weight value for initial connection creation"
                        }
                        pendConn = new Connection( sgid, tgid, configuration, $s6, spontMiniRate, synapseMode )
                        pendConn.setWeightScalar( weight )

                        if( object_id( synOverride, 1 ) != -1 ) {
                            pendConn.synOverride = synOverride
                        }
                    }
                    existingConn = nil
                }
            }

            // if we are using an object for a pending connection, then it is new and requires we place the synapse(s) for the current index
            if( object_id(pendConn,1) != -1 ) {
                //placeSynapses( pendConn, synParamsList.o(synIndex), synIndex+1 )
                activeParams = synParamsList.o(synIndex)
                pendConn.append( targetManager.locationToPoint( tgid, activeParams.isec, activeParams.ipt, activeParams.offset ), activeParams, activeParams.synapseID )
            }
        }  // end for each synapse

        //if we have a pending connection, make sure we store it
        if( object_id(pendConn,1) != -1 ) {
            storeConnection(pendConn)
        }
    }  //end for each gid
}

//-----------------------------------------------------------------------------------------------

/*!
 * For select gids, recover the Connection objects for those gids involved and adjust the weights or apply variable changes
 *
 * @param $o1 Connection configuration parsed from BlueConfig
 * @param $o2 Vector of gids on the local cpu
 */
proc applyDelayedConnection() { local weight, cellIndex, gid, synIndex, oldsgid, sgid, tgid \
    localobj sTarget, dTarget, gidvec, synParamsList, activeParams, pendConn, existingConn, sgids, spConnect, nil
    spConnect = $o1
    gidvec = $o2

    //unlike connectAll, we must look through connectionList to see if sgid->tgid exists because it may be getting weights updated
    // Note that it is better to get the whole target over just the gid vector, since then we can use utility functions like 'contains'
    sTarget = targetManager.getTarget( spConnect.get("Source").s )
    dTarget = targetManager.getTarget( spConnect.get("Destination").s )

    for cellIndex=0, gidvec.size()-1 {
        // gid on local should be member of destination target
        tgid = gidvec.x[cellIndex]
        if( !dTarget.contains( tgid ) ) {
            continue
        }

        //is it better to iterate over the cell's presyn gids or the target's gids.  Probably the former, but this is easier.  Can change later
        sgids = sTarget.completegids()
        for sgidIndex=0,sgids.size()-1 {
            sgid = sgids.x[sgidIndex]
            existingConn = findConnection( sgid, tgid )
            if( object_id(existingConn, 1) != -1 ) {
                //change the weight for all those netcons
                if( spConnect.exists("Weight") ) {
                    existingConn.updateWeights( spConnect.valueOf("Weight") )
                }

                if( spConnect.exists( "SynapseConfigure" ) ) {
                    existingConn.executeConfigure( spConnect.get("SynapseConfigure") )
                }

                if( spConnect.exists( "SpontMinis" ) ) {
                    existingConn.setSpontRate( spConnect.valueOf("SpontMinis") )
                }
            }
        }
    }
}

//-----------------------------------------------------------------------------------------------

/*!
 * Go through list of created connections and see if any match the pathway sgid->tgid
 *
 * @param $1 sgid Source/Presynaptic cell
 * @param $2 tgid Destination/Postsynaptic cell
 * @return Reference to existing Connection object or nil if it is the first time the pathway exists
 */
obfunc findConnection() { local connIndex, key  localobj nil, innerList

    key = $2
//    if( targetManager.cellDistributor.pnm.myid == 0 ) {
//        print "find ", $2, "->", $1, " amongst ", connectionList.count(), "items"
//    }

    //search through list, using binary search to find if this target exists
    binsrch_low = 0
    binsrch_high = connectionList.count()

    while ( binsrch_low < binsrch_high ) {
        binsrch_mid = int(( binsrch_low+binsrch_high)*0.5 )

//        if( targetManager.cellDistributor.pnm.myid == 0 ) {
//            print key, " vs ", connectionList.o(binsrch_mid).o(0).tgid
//        }

        if( key < connectionList.o(binsrch_mid).o(0).tgid ) { //guess again, lower
            binsrch_low = binsrch_mid+1
        } else {
            binsrch_high = binsrch_mid
        }

//        if( targetManager.cellDistributor.pnm.myid == 0 ) {
//            print "new range: ", binsrch_low, "..", binsrch_high
//        }

    }

    if( binsrch_low<connectionList.count() ) {
        if( connectionList.o(binsrch_low).o(0).tgid == key ) {
            //found it!
            innerList = connectionList.o(binsrch_low)
        } else {
            //no inner list for this sgid, so we can return nil
            return nil
        }
    } else {  //not found, return nil
        return nil
    }

    //if we reach here, then we have found a pre-existing inner list that we now must search
    binsrch_low = 0
    binsrch_high = innerList.count()
    key = $1

    while ( binsrch_low < binsrch_high ) {
        binsrch_mid = int(( binsrch_low+binsrch_high)*0.5 )

        if( key < innerList.o(binsrch_mid).sgid ) { //guess again, lower
            binsrch_low = binsrch_mid+1
        } else {
            binsrch_high = binsrch_mid
        }
    }

    if( binsrch_low<innerList.count() ) if ( innerList.o(binsrch_low).sgid == key ) {  //found
        return innerList.o(binsrch_low)
    }

    return nil
}

//-----------------------------------------------------------------------------------------------

/*!
 * When we have created a new connection (sgid->tgid), determine where to store it in our arrangement
 * and store it for faster retrieval later
 *
 * @param $o1 Connection object to be stored in the connectionList
 */
proc storeConnection() { local binsrch_low, binsrch_mid, binsrch_high, key  localobj innerList

    key = $o1.tgid
//    if( targetManager.cellDistributor.pnm.myid == 0 ) {
//        print "store ", $o1.tgid, "->", $o1.sgid, " amongst ", connectionList.count(), "items"
//    }

    //search through list, using binary search to find if this target exists
    binsrch_low = 0
    binsrch_high = connectionList.count()

    while ( binsrch_low < binsrch_high ) {
        binsrch_mid = int(( binsrch_low+binsrch_high)*0.5 )

//        if( targetManager.cellDistributor.pnm.myid == 0 ) {
//            print key, " vs ", connectionList.o(binsrch_mid).o(0).tgid
//        }
        if( key < connectionList.o(binsrch_mid).o(0).tgid ) { //guess again, lower
            binsrch_low = binsrch_mid+1
        } else {
            binsrch_high = binsrch_mid
        }
//        if( targetManager.cellDistributor.pnm.myid == 0 ) {
//            print "new range: ", binsrch_low, "..", binsrch_high
//        }

    }

    if( binsrch_low<connectionList.count() ) {
        if( connectionList.o(binsrch_low).o(0).tgid == key ) {
            //found it!
            innerList = connectionList.o(binsrch_low)
        } else {
            //no inner list, but we can make one and insert it using binsrch_low which is where we expected it

            connectionList.insrt( binsrch_low, new List() )
            connectionList.o(binsrch_low).append( $o1 )
            return
        }
    } else {  //not found, should be appended to list
        connectionList.append( new List() )
        connectionList.o(connectionList.count()-1).append( $o1 )
        return
    }

    //if we reach here, then we have found a pre-existing inner list that we now must search
    binsrch_low = 0
    binsrch_high = innerList.count()
    key = $o1.sgid

    while ( binsrch_low < binsrch_high ) {
        binsrch_mid = int(( binsrch_low+binsrch_high)*0.5 )

        if( key < innerList.o(binsrch_mid).sgid ) { //guess again, lower
            binsrch_low = binsrch_mid+1
        } else {
            binsrch_high = binsrch_mid
        }
    }

    if( binsrch_low<innerList.count() ) {
        if( innerList.o(binsrch_low).sgid == key ) {
            //error! already exists
            print "Why are we attempting to store a connection (", $o1.sgid, "->", $o1.tgid, ") twice?"
        } else {
            //put Connection obj here
            innerList.insrt( binsrch_low, $o1 )
        }
    } else {  //can append Connection obj to end list
        innerList.append( $o1 )
    }
}


//-----------------------------------------------------------------------------------------------

/*!
 * All synapses should be placed, all weight scalars should have their final values.  Now we can create the netcons
 *
 * @param $1 baseSeed optional argument to adjust synapse RNGs (default=0)
 */
proc finalizeSynapses() { local innerIndex, connIndex, spgid, baseSeed  localobj cell, connectObj, metype

    baseSeed = 0
    if( numarg()==1 ) baseSeed = $1

    for connIndex=0, connectionList.count()-1 {
        for innerIndex=0, connectionList.o(connIndex).count()-1 {
            connectObj = connectionList.o(connIndex).o(innerIndex)
            cell = targetManager.cellDistributor.getCell( connectObj.tgid )
            metype = targetManager.cellDistributor.getMEType( connectObj.tgid )
            spgid = targetManager.cellDistributor.getSpGid( connectObj.tgid )

            connectObj.finalize( targetManager.cellDistributor.pnm, metype, baseSeed, spgid )
            //connectObj.finalize( targetManager.cellDistributor.pnm, cell, baseSeed, spgid )
        }

        //print "gid ", cell.gid, " has ", cell.synlist.count(), " synapses"
    }
}

//-----------------------------------------------------------------------------------------------

/*!
 * After all synapses have been placed, we can create special netcons to trigger
 * events on those synapses
 *
 * @param $s1 Target name whose gids should be replayed
 * @param $o2 map of gids with vector of spike times
 * @param $3 Delay for when events may start to be delivered
 */
proc replay() { local timeitVerbose, tgidIndex, sgidIndex, cellIndex, timeID, tgid  localobj connectObj, target, spikeMap
    spikeMap = $o2
    if( object_id( replayList, 1 ) == -1 ) {
        replayList = new List()
    }

    baseSeed = 0
    if( numarg()==1 ) baseSeed = $1

    target = targetManager.getTarget( $s1 )

    timeID = timeit_register( "register replay events" )
    timeitVerbose = timeit_setVerbose(0)  //don't want to see a message for every gid

    for tgidIndex=0, connectionList.count()-1 {
        tgid = connectionList.o(tgidIndex).o(0).tgid

        timeit_start( timeID )

        if( target.contains( tgid ) ) {
            for sgidIndex=0, connectionList.o(tgidIndex).count()-1 {
                connectObj = connectionList.o(tgidIndex).o(sgidIndex)

                if( spikeMap.exists(connectObj.sgid) ) {
                    connectObj.replay( spikeMap.get(connectObj.sgid), $3 )
                    replayList.append(connectObj)
                }
            }
        }
        timeit_add( timeID )
    }
    {timeit_setVerbose(timeitVerbose)}
}

//-----------------------------------------------------------------------------------------------

/*!
 * Access the specified dataset from the nrn.h5 file to get all synapse parameters for a post-synaptic cell
 *
 * @param $1 gid of the cell whose data is needed
 * @return $o2 List populated by SynapseParameters objects read from the nrn.h5 file
 */
obfunc getSynapseParameters() {  local gid  localobj synParamsList
    gid = $1

    if( loadedMap.exists(gid) ) {
        return loadedMap.get(gid)
    }

    synParamsList = synapseReader.loadSynapseParameters(gid)
    loadedMap.put(gid, synParamsList)

    return synParamsList
}


//-----------------------------------------------------------------------------------------------

/**
 * @param $1 gid whose synapses are to be verbose
 */
proc toggleVerbose() { local gid, synapseIndex  localobj gidvec, cell
    gid = $1

    gidvec = targetManager.cellDistributor.getGidListForProcessor()
    if( gidvec.contains( gid ) ) {
        cell = targetManager.cellDistributor.getCell(gid)
        print "test ", cell.synlist
        print "test2 ", cell.synlist.size()
/*
        for synapseIndex=0, cell.synlist.size()-1 {
            print cell.synlist.o(synapseIndex)
            //cell.synlist.o(synapseIndex).toggleVerbose()
        }
*/
    }
}

//-----------------------------------------------------------------------------------------------

/**
 * After a restore, any minis or replays in this Connection will need to be restarted
 *
 * @param $o1 jumpstarters List object to hold NetCons which are used to restart the ALUs
 */
proc restartModSources() { local tgidIndex, sgidIndex
    for tgidIndex=0, connectionList.count()-1 {
        for sgidIndex=0, connectionList.o(tgidIndex).count()-1 {
            connectionList.o(tgidIndex).o(sgidIndex).restartModSources( $o1 )
        }
    }
}

//-----------------------------------------------------------------------------------------------

/**
 * Utility function to help query synaptic data for a given gid.
 *
 * @param $1 gid whose data we are accessing
 * @return list with synapse data for the gid
 */
obfunc getSynapseDataForGID() {  local synIndex, innerIndex, connIndex  localobj connectObj, synapseList, allSynList
    allSynList = new List()

    // note: inefficient.  If this will be called for more than a few gids, then we should switch from linear searches
    for connIndex=0, connectionList.count()-1 {
        if( connectionList.o(connIndex).o(0).tgid == $1 ) {
            for innerIndex=0, connectionList.o(connIndex).count()-1 {
                connectObj = connectionList.o(connIndex).o(innerIndex)

                synapseList = connectObj.synapseParamsList
                for synIndex=0, synapseList.count()-1 {
                    allSynList.append( synapseList.o(synIndex) )
                }
            }
        }
    }

    return allSynList
}

endtemplate SynapseRuleManager
