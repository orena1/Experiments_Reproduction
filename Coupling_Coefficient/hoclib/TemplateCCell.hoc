/**
 * @file TemplateCCell.hoc
 * @brief 
 * @author king
 * @date 2009-12-09
 * @remark Copyright Â© BBP/EPFL 2005-2011; All rights reserved. Do not distribute without further notice.
 */


{load_file("Cell.hoc")}
begintemplate CCell
public init, printInfo, AddMorphNL, delete_axon,  getCell, biophys, hardcode_biophys, connect2target
public gid, CellRef, locateSite, locateSites, getLongestBranch, getThreshold
objref this, CellRef

proc init() { localobj morphPath
	if(numarg() == 0){
		CellRef = new Cell()
	}else if(numarg()==1) {
		CellRef = new Cell($1)
	}else if(numarg() == 2){
        //arg 2 is directory with morphology files
        morphPath = new String()
        sprint( morphPath.s, "%s/%s", $s2, "morphologyInstance.asc")
		CellRef = new Cell($1, morphPath.s)
		biophys()
        geom_nseg()
    }
    CellRef.setCCell(this)
    gid = CellRef.gid
}

proc AddMorphNL(){ localobj nl, import
    CellRef.AddMorphNL($s1)
}

proc SetCellProperties(){local Rm,v_init
	CellRef.SetCellProperties($1, $2)
}

proc geom_nseg() {
	CellRef.geom_nseg_stub()  //must be changed to either geom_nseg_lambda or geom_nseg_fixed dependingy on modeler
}

obfunc getCell(){
	return CellRef
}

proc delete_axon(){local nSec, L1, L2, D1, D2,i1, i2, nSeg1, nSeg2 localobj sTmp
    //print "Called delete axon"
    sTmp = new String()
    
    nSec=0
    forsec CellRef.axonal {nSec = nSec + 1}
    nSec=0
    forsec CellRef.axonal {
        if(nSec == 0){
            L1      = L
            D1      = diam
            if(L<5) {
				nSeg1 = nseg
			} else {
            	nSeg1   = int(L/5)
			}
            i1      = v(0.0001)
        }
        if(nSec == 1){
            L2      = L
            D2      = diam
            if(L<5) {
				nSeg2 = nseg
			} else {
            	nSeg2   = int(L/5)
			}
            i2      = v(0.0001)
        }
        nSec = nSec + 1
    }
    forsec CellRef.axonal{delete_section()}
    execute1("create axon[2]\n", CellRef)

    access CellRef.axon[0]{
        L= 10
        diam = 0.5
        nseg =1
        v(0.0001) = i1
    }
    access CellRef.axon[1]{
        L= 10
        diam = 0.5
        nseg =1
        v(0.0001) = i1
    }
    if(nSec >0)  {
        access CellRef.axon[0]{
            L       = L1
            diam    = D1
            nseg    = nSeg1
            CellRef.axonal.append()
            CellRef.all.append()
        }
    }
    if(nSec >1)  {
        access CellRef.axon[1]{
            L       = L2
            diam    = D2
            nseg    = nSeg2
            v(0.0001) = i2
            CellRef.axonal.append()
            CellRef.all.append()
        }
    }else {
        print "Error in Morphology: No axon section[1] found"
        //execerror("failure in delete_axon()")
    }
    CellRef.nSecAxonal = 2
    
    CellRef.soma[0] connect CellRef.axon[0](0), 1
    CellRef.axon[0] connect CellRef.axon[1](0), 1

}

proc distribute_channels()	{local dist,val,base,maxLength localobj tstr
	base = $8
	tstr = new String()
	CellRef.soma distance()
	maxLength = getLongestBranch($o1)
	forsec $o1		{
		if(0==strcmp($s2,"Ra")){
			Ra = $8
		} else {
			for(x) {
				if ($3==3) {
					dist = distance(x)
				} else {
					dist = distance(x)/maxLength
				}
				val = calculate_distribution($3,dist,$4,$5,$6,$7,$8)
				sprint(tstr.s,"%s(%-5.10f) = %-5.10f",$s2,x,val)
                                //print tstr.s
				execute(tstr.s)
			}
		}
	}
}

// $1 is the distribution type:
//     0 linear, 1 sigmoid, 2 exponential
//     3 step for absolute distance (in microns)
func calculate_distribution()	{local value
	if ($1==0)	{value = $3 + $2*$4}
	if ($1==1) {value = $3 + ($4/(1+exp(($2-$5)/$6)))}
  	if ($1==2) {value = $3 + $6*exp($4*($2-$5))}
	if ($1==3) {
		if (($2 > $5) && ($2 < $6)) {
			value = $3
		} else {
			value = $4
		}
	}
	value = value*$7
	return value
}

// $o1 sectionList
func getLongestBranch(){local maxL,d localobj distallist,sref
		maxL = 0
		d = 0
		distallist = new SectionList()
		forsec $o1 {
			sref = new SectionRef()
			if (sref.nchild==0) distallist.append()
		}
		forsec distallist{
			d = distance(1)
			if(maxL<d) maxL = d
		}
		// for the soma case
		if (maxL == 0) maxL = 1
		return maxL
	}

// $o1 sectionList
// $2 distance x between 0 and 1
// $o3 return vector - of the appropriate section and the location in it
func locateSite() {local maxL,site,d0,d1,siteX,i
	CellRef.soma distance()
	maxL = getLongestBranch($o1)
	site = $2
	i = 0
	forsec $o1 {
		d0 = distance(0)/maxL
		d1 = distance(1)/maxL
    if (site <= d1 && site >= d0) {
      siteX = (site-d0)/(d1-d0)
      secNum = i
			$&3[0] = secNum
			$&3[1] = siteX
      return 1
		}
		i = i+1
	}
  return 0
}

// $o1 sectionList
// $2 distance x between 0 and 1
// return list of [1,2] vectors  - of the appropriate section and the location in each vector
obfunc locateSites() {local maxL,site,d0,d1,siteX,i localobj vv,ll
	ll = new List()
	soma distance()
	maxL = getLongestBranch($o1)
	site = $2
	i = 0
	forsec $o1 {
		d0 = distance(0)/maxL
		d1 = distance(1)/maxL
    if (site <= d1 && site >= d0) {
      siteX = (site-d0)/(d1-d0)
      secNum = i
      vv = new Vector()
      ll.append(vv.append(secNum,siteX))
		}
		i = i+1
	}
  return ll
}


proc hardcode_biophys() {
}

proc biophys() {
}

func getThreshold() { return thresholdCurrent }

proc connect2target() { //$o1 target point process, $o2 returned NetCon
  CellRef.soma $o2 = new NetCon(&v(1), $o1)
  $o2.threshold = -30
}

endtemplate CCell
